setwd("~/Updating/OHS/Pipelines/OptHoldoutSize_pipelines/")
source("~/Updating/OHS/Pipelines/OptHoldoutSize_pipelines/aspre_analysis.R")
source("~/Updating/OHS/Pipelines/OptHoldoutSize_pipelines/general_pipeline.R")
source("~/Updating/OHS/Pipelines/OptHoldoutSize_pipelines/sim_system_pipeline.R")
save_plot
save_plot=TRUE
if (!save_plot) par(mfrow=c(2,2))
# Loop through values of 'families' and 'interactions'
for (xf in 1:length(families)) {
for (xi in 1:length(interactions)) {
family=families[xf]
ninters=interactions[xi]
if (save_plot) pdf(paste0("figures/example_simulation_",family,"_int",ninters,".pdf"),
width=4,height=4)
X=data_example_simulation[[paste0("data_",family,"_inter",ninters)]]
for (i in 1:length(X)) assign(names(X)[i],X[[i]])
# Plot title
if (xi==1 & xf==1) ptitle=expression(paste("Lin. und., lin. ",rho))
if (xi==2 & xf==1) ptitle=expression(paste("Non-lin. und., lin. ",rho))
if (xi==1 & xf==2) ptitle=expression(paste("Lin. und., non-lin. ",rho))
if (xi==2 & xf==2) ptitle=expression(paste("Non-lin. und., non-lin. ",rho))
# Y axis range
if (xi==1) yl=c(2100,2350) else yl=c(2450,2700)
# Holdout set size in absolute terms
n_ho=frac_ho*nobs
# Colour intensities
r_alpha=0.2
b_alpha=0.6
# Create figure
par(mar=c(4,4,3,4))
plot(0, 0, type = "n",
ylab = "L(n)",
xlab = "Holdout set size (n)",
main=ptitle,
xlim=range(n_ho),
ylim = yl
)
### Draw learning curve with axis on right
# Compute
k2=colMeans(costs_inter_resample)/(nobs-n_ho)
# Scaling
if (xi==2) scvec=c(0.48,20) else scvec=c(0.42,20)
k2_sc=function(x) yl[1] + (yl[2]-yl[1])*(x-scvec[1])*scvec[2] # Scaling transform
i_k2_sc=function(x) (x-yl[1])/(scvec[2]*(yl[2]-yl[1])) + scvec[1] # Inverse
# Add standard deviation. Note this is scaled by (nobs-n_ho)
sd_k2=colSds(costs_inter_resample)/(nobs-n_ho)
polygon(c(n_ho, rev(n_ho)),
k2_sc(c(k2 + sd_k2,rev(k2-sd_k2))),
col = rgb(1,0,0,alpha=r_alpha),
border = NA)
# Add axis and label
axis(4,at=k2_sc(pretty(i_k2_sc(yl))),labels=pretty(i_k2_sc(yl)))
mtext(expression(paste("k"[2],"(n)")), side=4, line=3)
# Estimate parameters.
theta=c(1,1,1);
for (i in 1:5) theta=powersolve(n_ho,k2,init=theta)$par
k1=median(colMeans(costs_ho_resample)/(nobs*frac_ho))
k2=theta[1]*(n_ho)^(-theta[2]) + theta[3]
# Line for estimated k2 curve
lines(n_ho,
k2_sc(k2),
col="red",lty=2)
# Line for estimated cost function
xcost=n_ho*k1 + k2*(nobs-n_ho)
lines(n_ho,
xcost,
col="blue",lty=2)
# Add minimum L and OHS
ohs=n_ho[which.min(xcost)]
minL=min(xcost)
lines(c(ohs,ohs),c(0,minL),lty=2)
abline(h=minL,lty=2)
points(ohs,minL,pch=16)
# Finally, add cost function (on top)
# Plot Cost line
lines(n_ho,
colMeans(costs_tot_resample[base_vars, , ]),
pch = 16,
lwd = 1,
col = "blue")
# Standard Deviation Bands
polygon(c(n_ho, rev(n_ho)),
c(colMeans(costs_tot_resample[1,,]) - costs_sd[1, ],
rev(colMeans(costs_tot_resample[1,,]) + costs_sd[1, ])),
col = rgb(0,0,1,alpha=b_alpha),
border = NA)
# Add legend
legend("topright", legend = c("L(n)", "SD","Fitted",
"OHS",
expression(paste("k"[2],"(n)")), "SD","Fitted",
"Min. L"),
col = c("blue",rgb(0,0,1, alpha = b_alpha),"blue","black",
"red",rgb(1,0,0, alpha = r_alpha),"red","black"),
lty=c(1,NA,2,NA,
1,NA,2,2),
pch=c(NA,16,NA,16,
NA,16,NA,NA),
bty="n",bg="white",
ncol=2
)
if (save_plot) dev.off()
}
}
source("~/Updating/OHS/Pipelines/OptHoldoutSize_pipelines/aspre_analysis.R")
dev.off()
source("~/Updating/OHS/Pipelines/OptHoldoutSize_pipelines/aspre_analysis.R")
load("data/ohs_resample.RData",v=T)
dim(ohs_resample)
source("~/Updating/OHS/Pipelines/OptHoldoutSize_pipelines/comparison_pipeline.R")
source("~/Updating/OHS/Pipelines/OptHoldoutSize_pipelines/comparison_pipeline.R")
