r_eye=l_eye
metadata=vector(mode="list",length=length(photo_names))
names(metadata)=photo_names
sfile="~/Personal/Matthew/Photo_a_day/locdata.RData"
if (file.exists(sfile)) {
l_eye1=l_eye; r_eye1=r_eye; metadata1=metadata
load(sfile)
inames=intersect(rownames(l_eye),rownames(l_eye1))
l_eye1[inames,]=l_eye[inames,]
r_eye1[inames,]=r_eye[inames,]
metadata1[inames]=metadata[inames]
l_eye=l_eye1
r_eye=r_eye1
metadata=metadata1
}
pmax=length(photo_names)
for (i in 1:pmax) {
#  for (i in 1:length(photo_names)) {
if (!is.finite(l_eye[photo_names[i],1])) {
par(mar=c(0,0,0,0))
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xaxs="i",yaxs="i")
picx=readJPEG(photo_names[i])
rasterImage(picx,0,0,1,1)
clickloc=as.numeric(gsub("npc","",as.vector(grid.locator("npc"))))*4/3
points(clickloc[1],clickloc[2],pch=16,col="white",cex=3)
clickloc2=as.numeric(gsub("npc","",as.vector(grid.locator("npc"))))*4/3
points(clickloc2[1],clickloc2[2],pch=16,col="black",cex=3)
l_eye[i,]=clickloc
r_eye[i,]=clickloc2
dat=read_exif(photo_names[i])
metadata[[i]]=dat
names(metadata)[[i]]=photo_names[i]
save(l_eye,r_eye,metadata,file=sfile)
Sys.sleep(0.5)
}
print(i)
}
# Sort photos in order by date ####
pmax=max(which(is.finite(l_eye[,1])))
l_eye=l_eye[1:pmax,]
r_eye=r_eye[1:pmax,]
metadata=metadata[1:pmax]
photo_names=photo_names[1:pmax]
dates=as.Date(unlist(lapply(metadata,function(x) x$DateTimeOriginal)),format="%Y:%m:%d")
length(dates)
# Fix some dates
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//0A45D199-BADD-4ECE-A677-01AEE5D2436B.JPG"] = as.Date("2022-09-10")
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//C7A8743F-7AEA-4B8B-AF7A-B87F52D4120C.JPG"] = as.Date("2022-09-11")
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//A878329F-9CE8-48F2-B3DF-E341698D4AA7.JPG"] = as.Date("2023-03-25")
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//d1e00451-c542-4baa-b22e-2f437b053747.jpeg"] = as.Date("2024-03-24")
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//9c131d26-03f7-4799-9910-d3cb0783236f.jpeg"] = as.Date("2024-06-05")
length(dates)
dates=as.Date(unlist(lapply(metadata,function(x) x$DateTimeOriginal)),format="%Y:%m:%d")
"/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//0A45D199-BADD-4ECE-A677-01AEE5D2436B.JPG" %in% names(dates)
"/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//C7A8743F-7AEA-4B8B-AF7A-B87F52D4120C.JPG" %in% names(dates)
"/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//A878329F-9CE8-48F2-B3DF-E341698D4AA7.JPG" %in% names(dates)
# Save gif of only face-on photos ####
ani.record(reset = TRUE)  # clear history before recording
scxj=seq(2,0.5,length=length(photo_names))
for (j in 1:length(fclear)) {
i=j
par(pty="s")
plot(0,xlim=c(-3,3),ylim=c(-3,3),type="n",bty="n",ann=F,xaxt="n",yaxt="n")
picx=readJPEG(photo_names[i])
dm=dim(picx)[1]/dim(picx)[2]
L=as.numeric(l_eye[i,1:2]); R=as.numeric(r_eye[i,1:2]);
L[2]=L[2]*dm; R[2]=R[2]*dm
emid=(L+R)/2 # midpoint of eyes
edist=sqrt(sum((R-L)^2)) # distance between eyes
theta=atan((R[2]-L[2])/(R[1]-L[1])) # angle through which to rotate picture
if (L[1]>R[1]) theta = theta + pi # correction for error
phi=-atan(emid[2]/emid[1]) # angle to midpoint of eyes
dmid=sqrt(sum(emid^2)) # distance from bottom left corner to midpoint of eyes
emidr=dmid*c(cos(theta+phi),-sin(theta+phi)) # co-ordinates of midpoint in rotated image
sc=1/edist
# Adjust brightness
L=as.numeric(l_eye[i,1:2]); R=as.numeric(r_eye[i,1:2]);
L1=L*dim(picx)[2:1];   R1=R*dim(picx)[2:1]; mm = (L1+R1)/2; mm=mm[2:1];
mm[1]=dim(picx)[1]-mm[1]
dd=(3/4)*sqrt(sum((L1-R1)^2))
dx=outer(1:dim(picx)[1],1:dim(picx)[2],function(x,y) sqrt((x-mm[1])^2 + (y-mm[2])^2))
ww=which(dx<dd)
bx1=mean(picx[,,1][ww])
bx2=mean(picx[,,2][ww])
bx3=mean(picx[,,3][ww])
sc1=0.7/bx1; sc2=0.44/bx2; sc3=0.3/bx3
picx[,,1]=pmin(1,picx[,,1]*sc1)
picx[,,2]=pmin(1,picx[,,2]*sc2)
picx[,,3]=pmin(1,picx[,,3]*sc3)
# Plot
s0=scxj[j]
rasterImage(picx,-s0*sc*emidr[1],-s0*sc*emidr[2],s0*sc*(1-emidr[1]),s0*sc*(dm-emidr[2]),
angle=-theta*180/pi)
#points(0,0,pch=16,cex=2,col="red")
ani.record()
print(i)
}
# Save gif of only face-on photos ####
# Start slow, speed up, slow down at end
nslow=30
nh=0.4; nl=0.1
np=length(fclear)
tx=rep(nl,np)
tx[1]=1; tx[np]=1
ts=nl + seq(sqrt(nh-nl),0,length=nslow)^2
tx[2:(1+nslow)]=ts
tx[np + 1 - (2:(1+nslow))]=ts
oopts = ani.options(interval = tx)
saveGIF(ani.replay(),movie.name="~/Personal/Matthew/Photo_a_day/matthew_days24.gif")
length(photo_names)
plot(tx)
100 %% tx[1:10]
100 %% (1/tx[1:10])
tx[1:10]
if (tx[1:10])
))
as.logical(100 %% (1/tx[1:10]))
# Start slow, speed up, slow down at end
nslow=30
nh=0.4; nl=0.1
np=length(photo_names)
tx=rep(nl,np)
tx[1]=0.9; tx[np]=0.9
ts=nl + seq(sqrt(nh-nl),0,length=nslow)^2
tx[2:(1+nslow)]=ts
tx[np + 1 - (2:(1+nslow))]=ts
oopts = ani.options(interval = tx)
as.logical(100 %% (1/tx[1:10]))
1/tx[1]
100 %% (1/tx[1])
100 %% (1/tx[2])
tx[1]
100 %% 0.9
100 %% (1/0.9)
1/0.9
100 %% (1/0.95)
100 %% (1/0.5)
100 %% (1/0.6)
100 %% (1/0.7)
100 %% (1/tx[2])
tx[2]
1/0.4
# Start slow, speed up, slow down at end
nslow=30
nh=0.4; nl=0.1
np=length(photo_names)
tx=rep(nl,np)
tx[1]=1; tx[np]=1
ts=nl + seq(sqrt(nh-nl),0,length=nslow)^2
tx[2:(1+nslow)]=ts
tx[np + 1 - (2:(1+nslow))]=ts
oopts = ani.options(interval = tx)
saveGIF(ani.replay(),movie.name="~/Personal/Matthew/Photo_a_day/matthew_days24.gif",convert="convert")
saveGIF(ani.replay(),movie.name="~/Personal/Matthew/Photo_a_day/matthew_days24.gif",convert="convert")
## Matthew 1 year ####
# Packages
library("magick")
library(animation)
library(grid)
library(jpeg)
library(exifr)
# Directory of photos
photo_dir="~/Personal/Matthew/Photo_a_day/Photos_original/"
# Names of photos
photo_names=list.files(photo_dir,full.names=TRUE)
# Gather co-ordinates of eyes ####
l_eye=data.frame(x=rep(NA,length(photo_names)),y=rep(NA,length(photo_names)));
rownames(l_eye)=photo_names
r_eye=l_eye
metadata=vector(mode="list",length=length(photo_names))
names(metadata)=photo_names
sfile="~/Personal/Matthew/Photo_a_day/locdata.RData"
if (file.exists(sfile)) {
l_eye1=l_eye; r_eye1=r_eye; metadata1=metadata
load(sfile)
inames=intersect(rownames(l_eye),rownames(l_eye1))
l_eye1[inames,]=l_eye[inames,]
r_eye1[inames,]=r_eye[inames,]
metadata1[inames]=metadata[inames]
l_eye=l_eye1
r_eye=r_eye1
metadata=metadata1
}
pmax=length(photo_names)
for (i in 1:pmax) {
#  for (i in 1:length(photo_names)) {
if (!is.finite(l_eye[photo_names[i],1])) {
par(mar=c(0,0,0,0))
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xaxs="i",yaxs="i")
picx=readJPEG(photo_names[i])
rasterImage(picx,0,0,1,1)
clickloc=as.numeric(gsub("npc","",as.vector(grid.locator("npc"))))*4/3
points(clickloc[1],clickloc[2],pch=16,col="white",cex=3)
clickloc2=as.numeric(gsub("npc","",as.vector(grid.locator("npc"))))*4/3
points(clickloc2[1],clickloc2[2],pch=16,col="black",cex=3)
l_eye[i,]=clickloc
r_eye[i,]=clickloc2
dat=read_exif(photo_names[i])
metadata[[i]]=dat
names(metadata)[[i]]=photo_names[i]
save(l_eye,r_eye,metadata,file=sfile)
Sys.sleep(0.5)
}
print(i)
}
# Sort photos in order by date ####
pmax=max(which(is.finite(l_eye[,1])))
l_eye=l_eye[1:pmax,]
r_eye=r_eye[1:pmax,]
metadata=metadata[1:pmax]
photo_names=photo_names[1:pmax]
dates=as.Date(unlist(lapply(metadata,function(x) x$DateTimeOriginal)),format="%Y:%m:%d")
# Fix some dates
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//d1e00451-c542-4baa-b22e-2f437b053747.jpeg"] = as.Date("2024-03-24")
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//9c131d26-03f7-4799-9910-d3cb0783236f.jpeg"] = as.Date("2024-06-05")
length(names(metadata))
length(dates)
length(which(names(metadata) %in% names(dates)))
dates=dates[names(metadata)]
xord=order(dates)
# Reorder by dates
photo_names=photo_names[xord]
l_eye=l_eye[xord,]
r_eye=r_eye[xord,]
dates=dates[xord]
metadata=metadata[xord]
nphoto=length(photo_names)
# Save gif of only face-on photos ####
ani.record(reset = TRUE)  # clear history before recording
scxj=seq(2,0.5,length=length(photo_names))
for (j in 1:length(photo_names)) {
i=j
par(pty="s")
plot(0,xlim=c(-3,3),ylim=c(-3,3),type="n",bty="n",ann=F,xaxt="n",yaxt="n")
picx=readJPEG(photo_names[i])
dm=dim(picx)[1]/dim(picx)[2]
L=as.numeric(l_eye[i,1:2]); R=as.numeric(r_eye[i,1:2]);
L[2]=L[2]*dm; R[2]=R[2]*dm
emid=(L+R)/2 # midpoint of eyes
edist=sqrt(sum((R-L)^2)) # distance between eyes
theta=atan((R[2]-L[2])/(R[1]-L[1])) # angle through which to rotate picture
if (L[1]>R[1]) theta = theta + pi # correction for error
phi=-atan(emid[2]/emid[1]) # angle to midpoint of eyes
dmid=sqrt(sum(emid^2)) # distance from bottom left corner to midpoint of eyes
emidr=dmid*c(cos(theta+phi),-sin(theta+phi)) # co-ordinates of midpoint in rotated image
sc=1/edist
# Adjust brightness
L=as.numeric(l_eye[i,1:2]); R=as.numeric(r_eye[i,1:2]);
L1=L*dim(picx)[2:1];   R1=R*dim(picx)[2:1]; mm = (L1+R1)/2; mm=mm[2:1];
mm[1]=dim(picx)[1]-mm[1]
dd=(3/4)*sqrt(sum((L1-R1)^2))
dx=outer(1:dim(picx)[1],1:dim(picx)[2],function(x,y) sqrt((x-mm[1])^2 + (y-mm[2])^2))
ww=which(dx<dd)
bx1=mean(picx[,,1][ww])
bx2=mean(picx[,,2][ww])
bx3=mean(picx[,,3][ww])
sc1=0.7/bx1; sc2=0.44/bx2; sc3=0.3/bx3
picx[,,1]=pmin(1,picx[,,1]*sc1)
picx[,,2]=pmin(1,picx[,,2]*sc2)
picx[,,3]=pmin(1,picx[,,3]*sc3)
# Plot
s0=scxj[j]
rasterImage(picx,-s0*sc*emidr[1],-s0*sc*emidr[2],s0*sc*(1-emidr[1]),s0*sc*(dm-emidr[2]),
angle=-theta*180/pi)
#points(0,0,pch=16,cex=2,col="red")
ani.record()
print(i)
}
# Save gif of only face-on photos ####
# Start slow, speed up, slow down at end
nslow=30
nh=0.4; nl=0.1
np=length(photo_names)
tx=rep(nl,np)
tx[1]=1; tx[np]=1
ts=nl + seq(sqrt(nh-nl),0,length=nslow)^2
tx[2:(1+nslow)]=ts
tx[np + 1 - (2:(1+nslow))]=ts
oopts = ani.options(interval = tx)
saveGIF(ani.replay(),movie.name="~/Personal/Matthew/Photo_a_day/matthew_days24.gif",convert="convert")
#saveVideo(ani.replay(),video.name="~/Personal/Matthew/Photo_a_day/matthew_days350_fast.mp4")
## Matthew 1 year ####
# Packages
library("magick")
library(animation)
library(grid)
library(jpeg)
library(exifr)
# Directory of photos
photo_dir="~/Personal/Matthew/Photo_a_day/Photos_original/"
# Names of photos
photo_names=list.files(photo_dir,full.names=TRUE)
# Gather co-ordinates of eyes ####
l_eye=data.frame(x=rep(NA,length(photo_names)),y=rep(NA,length(photo_names)));
rownames(l_eye)=photo_names
r_eye=l_eye
metadata=vector(mode="list",length=length(photo_names))
names(metadata)=photo_names
sfile="~/Personal/Matthew/Photo_a_day/locdata.RData"
if (file.exists(sfile)) {
l_eye1=l_eye; r_eye1=r_eye; metadata1=metadata
load(sfile)
inames=intersect(rownames(l_eye),rownames(l_eye1))
l_eye1[inames,]=l_eye[inames,]
r_eye1[inames,]=r_eye[inames,]
metadata1[inames]=metadata[inames]
l_eye=l_eye1
r_eye=r_eye1
metadata=metadata1
}
pmax=length(photo_names)
for (i in 1:pmax) {
#  for (i in 1:length(photo_names)) {
if (!is.finite(l_eye[photo_names[i],1])) {
par(mar=c(0,0,0,0))
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xaxs="i",yaxs="i")
picx=readJPEG(photo_names[i])
rasterImage(picx,0,0,1,1)
clickloc=as.numeric(gsub("npc","",as.vector(grid.locator("npc"))))*4/3
points(clickloc[1],clickloc[2],pch=16,col="white",cex=3)
clickloc2=as.numeric(gsub("npc","",as.vector(grid.locator("npc"))))*4/3
points(clickloc2[1],clickloc2[2],pch=16,col="black",cex=3)
l_eye[i,]=clickloc
r_eye[i,]=clickloc2
dat=read_exif(photo_names[i])
metadata[[i]]=dat
names(metadata)[[i]]=photo_names[i]
save(l_eye,r_eye,metadata,file=sfile)
Sys.sleep(0.5)
}
print(i)
}
# Sort photos in order by date ####
pmax=max(which(is.finite(l_eye[,1])))
l_eye=l_eye[1:pmax,]
r_eye=r_eye[1:pmax,]
metadata=metadata[1:pmax]
photo_names=photo_names[1:pmax]
dates=as.Date(unlist(lapply(metadata,function(x) x$DateTimeOriginal)),format="%Y:%m:%d")
# Fix some dates
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//d1e00451-c542-4baa-b22e-2f437b053747.jpeg"] = as.Date("2024-03-24")
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//9c131d26-03f7-4799-9910-d3cb0783236f.jpeg"] = as.Date("2024-06-05")
dates=dates[names(metadata)]
xord=order(dates)
# Reorder by dates
photo_names=photo_names[xord]
l_eye=l_eye[xord,]
r_eye=r_eye[xord,]
dates=dates[xord]
metadata=metadata[xord]
nphoto=length(photo_names)
# Save gif of only face-on photos ####
ani.record(reset = TRUE)  # clear history before recording
adj_brightness=FALSE
scxj=seq(2,0.3,length=length(photo_names))
for (j in 1:length(photo_names)) {
i=j
par(pty="s")
plot(0,xlim=c(-3,3),ylim=c(-3,3),type="n",bty="n",ann=F,xaxt="n",yaxt="n")
picx=readJPEG(photo_names[i])
dm=dim(picx)[1]/dim(picx)[2]
L=as.numeric(l_eye[i,1:2]); R=as.numeric(r_eye[i,1:2]);
L[2]=L[2]*dm; R[2]=R[2]*dm
emid=(L+R)/2 # midpoint of eyes
edist=sqrt(sum((R-L)^2)) # distance between eyes
theta=atan((R[2]-L[2])/(R[1]-L[1])) # angle through which to rotate picture
if (L[1]>R[1]) theta = theta + pi # correction for error
phi=-atan(emid[2]/emid[1]) # angle to midpoint of eyes
dmid=sqrt(sum(emid^2)) # distance from bottom left corner to midpoint of eyes
emidr=dmid*c(cos(theta+phi),-sin(theta+phi)) # co-ordinates of midpoint in rotated image
sc=1/edist
# Adjust brightness
if (adj_brightness} {
## Matthew 1 year ####
# Packages
library("magick")
library(animation)
library(grid)
library(jpeg)
library(exifr)
# Directory of photos
photo_dir="~/Personal/Matthew/Photo_a_day/Photos_original/"
# Names of photos
photo_names=list.files(photo_dir,full.names=TRUE)
# Gather co-ordinates of eyes ####
l_eye=data.frame(x=rep(NA,length(photo_names)),y=rep(NA,length(photo_names)));
rownames(l_eye)=photo_names
r_eye=l_eye
metadata=vector(mode="list",length=length(photo_names))
names(metadata)=photo_names
sfile="~/Personal/Matthew/Photo_a_day/locdata.RData"
if (file.exists(sfile)) {
l_eye1=l_eye; r_eye1=r_eye; metadata1=metadata
load(sfile)
inames=intersect(rownames(l_eye),rownames(l_eye1))
l_eye1[inames,]=l_eye[inames,]
r_eye1[inames,]=r_eye[inames,]
metadata1[inames]=metadata[inames]
l_eye=l_eye1
r_eye=r_eye1
metadata=metadata1
}
pmax=length(photo_names)
for (i in 1:pmax) {
#  for (i in 1:length(photo_names)) {
if (!is.finite(l_eye[photo_names[i],1])) {
par(mar=c(0,0,0,0))
plot(0,type="n",xlim=c(0,1),ylim=c(0,1),xaxs="i",yaxs="i")
picx=readJPEG(photo_names[i])
rasterImage(picx,0,0,1,1)
clickloc=as.numeric(gsub("npc","",as.vector(grid.locator("npc"))))*4/3
points(clickloc[1],clickloc[2],pch=16,col="white",cex=3)
clickloc2=as.numeric(gsub("npc","",as.vector(grid.locator("npc"))))*4/3
points(clickloc2[1],clickloc2[2],pch=16,col="black",cex=3)
l_eye[i,]=clickloc
r_eye[i,]=clickloc2
dat=read_exif(photo_names[i])
metadata[[i]]=dat
names(metadata)[[i]]=photo_names[i]
save(l_eye,r_eye,metadata,file=sfile)
Sys.sleep(0.5)
}
print(i)
}
# Sort photos in order by date ####
pmax=max(which(is.finite(l_eye[,1])))
l_eye=l_eye[1:pmax,]
r_eye=r_eye[1:pmax,]
metadata=metadata[1:pmax]
photo_names=photo_names[1:pmax]
dates=as.Date(unlist(lapply(metadata,function(x) x$DateTimeOriginal)),format="%Y:%m:%d")
# Fix some dates
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//d1e00451-c542-4baa-b22e-2f437b053747.jpeg"] = as.Date("2024-03-24")
dates["/Users/vwbw55/Personal/Matthew/Photo_a_day/Photos_original//9c131d26-03f7-4799-9910-d3cb0783236f.jpeg"] = as.Date("2024-06-05")
dates=dates[names(metadata)]
xord=order(dates)
# Reorder by dates
photo_names=photo_names[xord]
l_eye=l_eye[xord,]
r_eye=r_eye[xord,]
dates=dates[xord]
metadata=metadata[xord]
nphoto=length(photo_names)
# Save gif of only face-on photos ####
ani.record(reset = TRUE)  # clear history before recording
adj_brightness=FALSE
scxj=seq(2,0.3,length=length(photo_names))
for (j in 1:length(photo_names)) {
i=j
par(pty="s")
plot(0,xlim=c(-3,3),ylim=c(-3,3),type="n",bty="n",ann=F,xaxt="n",yaxt="n")
picx=readJPEG(photo_names[i])
dm=dim(picx)[1]/dim(picx)[2]
L=as.numeric(l_eye[i,1:2]); R=as.numeric(r_eye[i,1:2]);
L[2]=L[2]*dm; R[2]=R[2]*dm
emid=(L+R)/2 # midpoint of eyes
edist=sqrt(sum((R-L)^2)) # distance between eyes
theta=atan((R[2]-L[2])/(R[1]-L[1])) # angle through which to rotate picture
if (L[1]>R[1]) theta = theta + pi # correction for error
phi=-atan(emid[2]/emid[1]) # angle to midpoint of eyes
dmid=sqrt(sum(emid^2)) # distance from bottom left corner to midpoint of eyes
emidr=dmid*c(cos(theta+phi),-sin(theta+phi)) # co-ordinates of midpoint in rotated image
sc=1/edist
# Adjust brightness
if (adj_brightness) {
L=as.numeric(l_eye[i,1:2]); R=as.numeric(r_eye[i,1:2]);
L1=L*dim(picx)[2:1];   R1=R*dim(picx)[2:1]; mm = (L1+R1)/2; mm=mm[2:1];
mm[1]=dim(picx)[1]-mm[1]
dd=(3/4)*sqrt(sum((L1-R1)^2))
dx=outer(1:dim(picx)[1],1:dim(picx)[2],function(x,y) sqrt((x-mm[1])^2 + (y-mm[2])^2))
ww=which(dx<dd)
bx1=mean(picx[,,1][ww])
bx2=mean(picx[,,2][ww])
bx3=mean(picx[,,3][ww])
sc1=0.7/bx1; sc2=0.44/bx2; sc3=0.3/bx3
picx[,,1]=pmin(1,picx[,,1]*sc1)
picx[,,2]=pmin(1,picx[,,2]*sc2)
picx[,,3]=pmin(1,picx[,,3]*sc3)
}
# Plot
s0=scxj[j]
rasterImage(picx,-s0*sc*emidr[1],-s0*sc*emidr[2],s0*sc*(1-emidr[1]),s0*sc*(dm-emidr[2]),
angle=-theta*180/pi)
#points(0,0,pch=16,cex=2,col="red")
ani.record()
print(i)
}
# Save gif of only face-on photos ####
# Start slow, speed up, slow down at end
maketimes=function(np) {
nslow=30
nh=0.4; nl=0.1
tx=rep(nl,np)
tx[1]=1; tx[np]=1
ts=nl + seq(sqrt(nh-nl),0,length=nslow)^2
tx[2:(1+nslow)]=ts
tx[np + 1 - (2:(1+nslow))]=ts
return(tx)
}
np0=
np1=length(photo_names)
oopts = ani.options(interval = tx)
saveGIF(ani.replay(),movie.name="~/Personal/Matthew/Photo_a_day/matthew_days24.gif",convert="convert")
#saveVideo(ani.replay(),video.name="~/Personal/Matthew/Photo_a_day/matthew_days350_fast.mp4")
tx=maketimes(length(photo_names))
oopts = ani.options(interval = tx)
saveGIF(ani.replay(),movie.name="~/Personal/Matthew/Photo_a_day/matthew_days24.gif",convert="convert")
plot(tx)
dev.off()
plot(tx)
oopts = ani.options(interval = tx)
saveGIF(ani.replay(),movie.name="~/Personal/Matthew/Photo_a_day/matthew_days24.gif",convert="convert")
